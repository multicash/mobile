// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render source icon renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,_toString as __react__vue__toString } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'

import Money from '@/components/labels/Money'
import WalletIcon from '@/components/icons/WalletIcon'
import { Platform } from 'react-native'
const __react__vue__options =  {
  name: 'SourceIcon',

  components: { WalletIcon, Money },

  props: {
    transactionIcon: {
      type: Object,
      required: true
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme)
    }
  }
}

const stylesStore = (isDarkScheme) => {
  return {
    iconContainer: {
      justifyContent: 'center',
      alignItems: 'center'
    },

    iconCircle: {
      height: 64,
      width: 64,
      borderRadius: 32,
      backgroundColor: isDarkScheme ? '#494949' : '#fafafa',
      justifyContent: 'center',
      alignItems: 'center',
      marginBottom: 10
    },

    walletTitle: {
      color: isDarkScheme ? 'white' : 'black',
      fontWeight: Platform.OS === 'ios' ? '900' : 'bold',
      fontSize: 12
    },

    walletAmount: {
      color: isDarkScheme ? '#a7a7a7' : '#727272',
      fontSize: 12
    }
  }
}

const __react__vue__render = function render(vm) {
    return __react__vue__createElement(vm.$options.components['TouchableOpacity'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        onPress: () => vm['$emit']('on-press'),
        activeOpacity: 0.6,
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(undefined, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].iconContainer, undefined, undefined))
    }, __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].iconCircle, undefined, undefined))
    }, vm['transactionIcon'].icon ? __react__vue__createElement(vm.$options.components['Icon'], {
        name: vm['transactionIcon'].icon,
        size: 40,
        color: vm['transactionIcon'].iconColor,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }) : null, vm['transactionIcon'].image ? __react__vue__createElement(vm.$options.components['WalletIcon'], {
        icon: vm['transactionIcon'].image,
        size: 40,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }) : null), __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].walletTitle, undefined, undefined))
    }, __react__vue__toString(vm['transactionIcon'].title)), vm['transactionIcon'].amount ? __react__vue__createElement(vm.$options.components['Money'], {
        amount: vm['transactionIcon'].amount,
        crypto: true,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].walletAmount, undefined, undefined))
    }) : __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].walletAmount, undefined, undefined))
    }, __react__vue__toString(vm['transactionIcon'].tagOrAddress))));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
