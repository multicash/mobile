// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render rounded button renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,renderSlot as __react__vue__renderSlot,_toString as __react__vue__toString } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'


const __react__vue__options =  {
  name: 'RoundedButton',

  methods: {
    pressed () {
      if (this.disabled) {
        return
      }

      this.$emit('on-press')
    }
  },

  props: {
    title: {
      type: String,
      default: null
    },

    icon: {
      type: String,
      default: null
    },

    style: {
      type: Array,
      default: function () {
        return []
      }
    },

    disabled: {
      type: Boolean,
      default: false
    },

    type: {
      type: String,
      default: null
    }
  },

  computed: {
    styles () {
      const innerStyle = this.style[0] || {}

      return stylesStore(this.isDarkScheme, innerStyle, this.disabled, this.type)
    }
  }
}

const stylesStore = (isDarkScheme, innerStyle, disabled, type) => {
  let backgroundColor = isDarkScheme
    ? (disabled ? '#1b1d1d' : 'black')
    : (disabled ? '#f4f4f4' : '#f8f8f8')
  let color = disabled ? '#868686' : (isDarkScheme ? '#6d6de3' : '#3b3b89')

  switch (type) {
    case 'primary':
      backgroundColor = disabled ? (isDarkScheme ? '#3d3d3d' : '#868686') : (isDarkScheme ? '#6d6de3' : '#3b3b89')
      color = disabled ? (isDarkScheme ? '#9c9c9c' : '#cecece') : 'white'
  }

  return {
    roundedButtonOuter: {
      borderRadius: 10
    },

    roundedButton: {
      backgroundColor: backgroundColor,
      minWidth: 36,
      height: innerStyle.height || 50,
      borderRadius: 10,
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      paddingLeft: 20,
      paddingRight: 20,
      flexDirection: 'row'
    },

    roundedButtonIcon: {
      marginRight: 10
    },

    roundedButtonText: {
      color: color,
      fontWeight: 'bold',
      fontSize: 15
    }
  }
}

const __react__vue__render = function render(vm) {
    const __react__vue__slotSet = __react__vue__renderSlot.call(this, [], this.props.children);
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].roundedButtonOuter, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['TouchableOpacity'], {
        onPress: vm['pressed'],
        activeOpacity: vm['disabled'] ? 1 : 0.6,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].roundedButton, undefined, undefined))
    }, __react__vue__slotSet(undefined, {}) || [vm['icon'] ? __react__vue__createElement(vm.$options.components['Icon'], {
        name: vm['icon'],
        color: vm['styles'].roundedButtonText.color,
        size: 20,
        key: 0,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].roundedButtonIcon, undefined, undefined))
    }) : null, __react__vue__createElement(vm.$options.components['Text'], {
        key: 1,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].roundedButtonText, undefined, undefined))
    }, __react__vue__toString(vm['title']))]));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
