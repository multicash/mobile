// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render round button renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,renderSlot as __react__vue__renderSlot } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'


const __react__vue__options =  {
  name: 'RoundButton',

  props: {
    transparentShadow: {
      type: Boolean,
      default: false
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme, this.transparentShadow)
    }
  },

  methods: {
    pressed () {
      this.$emit('on-press')
    },

    pressedLong () {
      this.$emit('on-long-press')
    }
  }
}

const stylesStore = (isDarkScheme, transparentShadow) => {
  return {
    roundButtonOuter: {
      width: 36,
      height: 36,
      borderRadius: 100
    },

    roundButton: {
      width: '100%',
      height: '100%',
      backgroundColor: isDarkScheme ? 'black' : '#d4d4de',
      borderRadius: 100,
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    },

    content: {
      width: 36,
      height: 36,
      backgroundColor: 'transparent',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }
  }
}

const __react__vue__render = function render(vm) {
    const __react__vue__slotSet = __react__vue__renderSlot.call(this, [], this.props.children);
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].roundButtonOuter, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['TouchableOpacity'], {
        onPress: vm['pressed'],
        onLongPress: vm['pressedLong'],
        activeOpacity: 0.6,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].roundButton, undefined, undefined))
    }, __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].content, undefined, undefined))
    }, __react__vue__slotSet(undefined, {}))));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
