// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render addresses container component renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,renderList as __react__vue__renderList,_toString as __react__vue__toString } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'

import { subtitle, text } from '@/core/support/styles'
const __react__vue__options =  {
  name: 'AddressesContainer',

  props: {
    transactions: {
      type: Array,
      default () {
        return []
      }
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme)
    }
  }
}

const stylesStore = (isDarkScheme) => {
  return {
    item: {
      flexDirection: 'row',
      alignItems: 'center',
      borderRadius: 10,
      marginBottom: 5,
      backgroundColor: isDarkScheme ? '#2c2e36' : '#ffffff',
      padding: 15
    },

    itemAvatar: {
      width: 40,
      height: 40,
      marginRight: 10
    },

    itemTextContainer: {
      flex: 1,
      marginRight: 10
    },

    itemTitle: {
      color: text(isDarkScheme).color,
      fontSize: 16,
      marginBottom: 2
    },

    itemSubtitle: {
      color: subtitle(isDarkScheme).color,
      fontSize: 13
    },

    itemAmount: {
      fontWeight: 'bold',
      color: isDarkScheme ? '#b95c8b' : '#931A5A'
    },

    noTransactionsContainer: {
      alignItems: 'center',
      paddingVertical: 20
    },

    noTransactionsImage: {
      width: 60,
      height: 60,
      marginBottom: 10,
      resizeMode: 'contain'
    },

    noTransactionsLabel: {
      fontWeight: 'bold',
      fontSize: 16,
      color: subtitle(isDarkScheme).color
    }
  }
}

const __react__vue__render = function render(vm) {
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(undefined, undefined, undefined))
    }), vm['transactions'].length > 0 ? __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }, __react__vue__renderList(vm['transactions'], function(transaction) {
        return __react__vue__createElement(vm.$options.components['View'], {
            key: JSON.stringify(transaction),
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
        }, __react__vue__createElement(vm.$options.components['TouchableOpacity'], {
            activeOpacity: 0.6,
            onPress: () => vm['$emit']('on-press', transaction),
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].item, undefined, undefined))
        }, __react__vue__createElement(vm.$options.components['View'], {
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].itemAvatar, undefined, undefined))
        }, transaction.icon ? __react__vue__createElement(vm.$options.components['Icon'], {
            name: transaction.icon,
            color: transaction.color,
            size: 40,
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
        }) : null, transaction.avatar ? __react__vue__createElement(vm.$options.components['WalletIcon'], {
            icon: transaction.avatar,
            size: 40,
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
        }) : null), __react__vue__createElement(vm.$options.components['View'], {
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].itemTextContainer, undefined, undefined))
        }, __react__vue__createElement(vm.$options.components['Text'], {
            numberOfLines: 1,
            ellipsizeMode: "middle",
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].itemTitle, undefined, undefined))
        }, "" + __react__vue__toString(transaction.title) + ""), __react__vue__createElement(vm.$options.components['Text'], {
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].itemSubtitle, undefined, undefined))
        }, __react__vue__toString(transaction.subtitle))), __react__vue__createElement(vm.$options.components['Money'], {
            amount: transaction.amount,
            crypto: true,
            currency: "",
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].itemAmount, undefined, undefined))
        })));
    }.bind(this)), __react__vue__createElement(vm.$options.components['RoundedButton'], {
        title: "Show more",
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle({
            marginBottom: 5
        }, undefined, undefined))
    })) : __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].noTransactionsContainer, undefined, undefined))
    }, __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle({
            flexDirection: 'row'
        }, undefined, undefined))
    }, __react__vue__createElement(vm.$options.components['Image'], {
        source: require('@/assets/address-book.png'),
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].noTransactionsImage, undefined, undefined))
    })), __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].noTransactionsLabel, undefined, undefined))
    }, "No addresses created yet")));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
