// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render colors background component renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,renderList as __react__vue__renderList } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'


const __react__vue__options =  {
  name: 'ColorsBackground',

  data () {
    return {
      colors: [
        '#f744e4',
        '#e033eb',
        '#cb22f2',
        '#bf19f4',
        '#b00dfa',
        '#05ad25',
        '#0bbcda',
        '#00ade7'
      ]
    }
  },

  computed: {
    style () {
      return styleStore(this.fullScreen)
    }
  },

  props: {
    fullScreen: {
      type: Boolean,
      default: true
    },

    randomHeights: {
      type: Boolean,
      default: false
    },

    minHeightPercentage: {
      type: Number,
      default: 95
    },

    maxHeightPercentage: {
      type: Number,
      default: 100
    }
  }
}

const styleStore = (fullScreen) => {
  return {
    container: fullScreen ? {
      flexDirection: 'row',
      flex: 1,
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    } : {
      position: 'absolute',
      flexDirection: 'row',
      top: 0,
      left: 0,
      right: 0
    }
  }
}

const __react__vue__render = function render(vm) {
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['style'].container, undefined, undefined))
    }), __react__vue__renderList(vm['colors'], function(color) {
        return __react__vue__createElement(vm.$options.components['View'], {
            key: color,
            style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle({
                flex: 1,
                backgroundColor: color,
                height: vm['randomHeights'] ? Math.floor(Math.random() * (vm['maxHeightPercentage'] - vm['minHeightPercentage'] + 1) + vm['minHeightPercentage']) + '%' : undefined
            }, undefined, undefined))
        });
    }.bind(this)));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
