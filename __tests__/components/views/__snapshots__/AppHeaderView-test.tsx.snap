// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render app header view component renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,renderSlot as __react__vue__renderSlot } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'


const __react__vue__options =  {
  name: 'AppHeaderView',

  props: {
    insets: {
      type: Object
    },

    expand: {
      type: Boolean,
      default: true
    },

    colorsBackground: {
      type: Boolean,
      default: true
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme, this.insets, this.expand, this.colorsBackground)
    }
  }
}

const stylesStore = (isDarkScheme, insets, expand, colorsBackground) => {
  return {
    container: {
      flex: expand ? 1 : undefined,
      backgroundColor: isDarkScheme ? '#2c2e36' : '#ededf3',
      shadowBlur: 10,
      shadowRadius: 10,
      shadowOpacity: 0.1,
      shadowColor: '#000000',
      marginTop: -insets.top,
      minHeight: colorsBackground ? 200 : undefined,
      maxHeight: 400
    },

    contentContainer: {
      position: 'relative',
      paddingTop: insets.top,
      paddingBottom: 10,
      justifyContent: 'center',
      height: expand ? '100%' : undefined
    },

    colorsContainer: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    }
  }
}

const __react__vue__render = function render(vm) {
    const __react__vue__slotSet = __react__vue__renderSlot.call(this, [], this.props.children);
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].container, undefined, undefined))
    }), vm['colorsBackground'] ? __react__vue__createElement(vm.$options.components['ColorsBackground'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }) : null, __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].contentContainer, undefined, undefined))
    }, __react__vue__slotSet(undefined, {})));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
