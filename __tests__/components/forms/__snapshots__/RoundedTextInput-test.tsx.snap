// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render rounded text input renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,_toString as __react__vue__toString } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'


const __react__vue__options =  {
  name: 'RoundedTextInput',

  props: {
    value: {
      type: String,
      default: null
    },

    secureTextEntry: {
      type: Boolean,
      default: false
    },

    placeholder: {
      type: String,
      default: ''
    },

    title: {
      type: String,
      default: null
    },

    multiline: {
      type: Boolean,
      default: false
    },

    autoCapitalize: {
      type: String,
      default: 'sentences'
    },
    autoCompleteType: {
      type: String,
      default: 'off'
    },
    autoCorrect: {
      type: Boolean,
      default: true
    },
    keyboardType: {
      type: String,
      default: 'default'
    },
    fontSize: {
      type: Number,
      default: 18
    },
    autoFocus: {
      type: Boolean,
      default: false
    },
    focus: {
      type: Function,
      default () {
        this.$refs.input.focus()
      }
    },
    onFocus: {
      type: Function,
      default () {}
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme, this.multiline, this.fontSize)
    }
  },

  methods: {
    onChangeText (text) {
      this.$emit('input', text)
    },

    onEndEditing (event) {
      this.$emit('on-end-editing', event)
    }
  }
}

const stylesStore = (isDarkScheme, multiline, fontSize) => {
  return {
    container: {
      backgroundColor: isDarkScheme ? '#2e2e36' : '#d0d7e1',
      borderRadius: 10,
      flexGrow: 1,
      height: multiline ? undefined : 60,
      padding: 10,
      justifyContent: 'center'
    },

    title: {
      color: isDarkScheme ? '#B95C8B' : '#931A5A',
      fontSize: 12,
      marginBottom: 2
    },

    textInput: {
      color: isDarkScheme ? 'white' : 'black',
      width: '100%',
      height: multiline ? 100 : undefined,
      fontSize: fontSize
    }
  }
}

const __react__vue__render = function render(vm) {
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].container, undefined, undefined))
    }), vm['title'] ? __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].title, undefined, undefined))
    }, __react__vue__toString(vm['title'])) : null, __react__vue__createElement(vm.$options.components['TextInput'], {
        ref: ref => {
            this.setRef(ref, "input", false);
        },
        onChangeText: vm['onChangeText'],
        onEndEditing: vm['onEndEditing'],
        onFocus: vm['onFocus'],
        value: vm['value'],
        placeholder: vm['placeholder'],
        placeholderTextColor: vm['isDarkScheme'] ? '#848484' : '#7f7f7f',
        secureTextEntry: vm['secureTextEntry'],
        multiline: vm['multiline'],
        autoCapitalize: vm['autoCapitalize'],
        autoCompleteType: vm['autoCompleteType'],
        autoCorrect: vm['autoCorrect'],
        keyboardType: vm['keyboardType'],
        autoFocus: vm['autoFocus'],
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].textInput, undefined, undefined))
    }));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
