// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render selector renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,_toString as __react__vue__toString,renderSlot as __react__vue__renderSlot } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'

import Icon from '@/components/icons/Icon'
const __react__vue__options =  {
  name: 'Selector',

  components: { Icon },

  props: {
    name: {
      type: String,
      required: true
    },
    value: {
      type: String
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme)
    }
  }
}

const stylesStore = (isDarkScheme) => {
  return {
    container: {
      flexDirection: 'row',
      flexGrow: 1,
      alignItems: 'center',
      justifyContent: 'space-between',
      backgroundColor: isDarkScheme ? 'black' : 'white',
      borderRadius: 10,
      paddingVertical: 7.5,
      paddingHorizontal: 15,
      marginBottom: 10
    },

    name: {
      fontWeight: 'bold',
      color: isDarkScheme ? '#B95C8B' : '#931A5A'
    },

    value: {
      fontSize: 23,
      color: isDarkScheme ? '#dadada' : 'black'
    }
  }
}

const __react__vue__render = function render(vm) {
    const __react__vue__slotSet = __react__vue__renderSlot.call(this, ["value"], this.props.children);
    return __react__vue__createElement(vm.$options.components['TouchableOpacity'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        onPress: () => vm['$emit']('on-press'),
        activeOpacity: 0.6,
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].container, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }, __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].name, undefined, undefined))
    }, __react__vue__toString(vm['name'])), __react__vue__slotSet("value", {}) || [__react__vue__createElement(vm.$options.components['Text'], {
        key: 0,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].value, undefined, undefined))
    }, __react__vue__toString(vm['value']))]), __react__vue__createElement(vm.$options.components['Icon'], {
        name: "chevron-down-outline",
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
