// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render modal navigation renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,event as __react__vue__event,_toString as __react__vue__toString,renderSlot as __react__vue__renderSlot } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'

import { text } from '@/core/support/styles'
const __react__vue__options =  {
  name: 'ModalNavigation',

  props: {
    title: {
      type: String,
      default: null
    },
    hasCloseButton: {
      type: Boolean,
      default: false
    },
    hasBackButton: {
      type: Boolean,
      default: false
    },
    colorsBackground: {
      type: Boolean,
      default: false
    },
    smallTitle: {
      type: Boolean,
      default: false
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme, this.colorsBackground, this.smallTitle)
    }
  }
}

const stylesStore = (isDarkScheme, colorsBackground, smallTitle) => {
  return {
    modalNavigation: {
      backgroundColor: isDarkScheme ? '#2c2e36' : '#ededf3',
      display: 'flex',
      padding: 20,
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      shadowBlur: 10,
      shadowRadius: 10,
      shadowOpacity: 0.1,
      shadowColor: '#000000',
      zIndex: 1
    },

    modalNavigationTitle: {
      color: text(isDarkScheme).color,
      fontWeight: 'bold',
      fontSize: smallTitle ? 15 : 20
    }
  }
}

const __react__vue__render = function render(vm) {
    const __react__vue__slotSet = __react__vue__renderSlot.call(this, ["right"], this.props.children);
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].modalNavigation, undefined, undefined))
    }), vm['colorsBackground'] ? __react__vue__createElement(vm.$options.components['ColorsBackground'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }) : null, vm['hasCloseButton'] || vm['hasBackButton'] ? __react__vue__createElement(vm.$options.components['RoundButton'], {
        onOnPress: () => vm['$emit']('on-dismiss'),
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined),
        '__react__vue__customEventon-press': __react__vue__event(function($event) {
            vm['$emit']('on-dismiss');
        }.bind(this))
    }, vm['hasCloseButton'] ? __react__vue__createElement(vm.$options.components['Icon'], {
        name: "close",
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }) : null, vm['hasBackButton'] ? __react__vue__createElement(vm.$options.components['Icon'], {
        name: "chevron-back",
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }) : null) : null, __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }, vm['title'] ? __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].modalNavigationTitle, undefined, undefined))
    }, "" + __react__vue__toString(vm['title']) + "") : null), __react__vue__slotSet("right", {}));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
