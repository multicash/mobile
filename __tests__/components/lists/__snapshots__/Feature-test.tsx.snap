// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render feature renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,_toString as __react__vue__toString } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'

import { sectionFooter, sectionTitle } from '@/core/support/styles'
const __react__vue__options =  {
  name: 'Feature',

  computed: {
    styles () {
      return styleStore(this.isDarkScheme)
    }
  },

  props: {
    title: {
      type: String,
      required: true
    },
    description: {
      type: String,
      required: true
    },
    image: {
      type: Number,
      required: true
    }
  }
}

const styleStore = (isDarkScheme) => {
  return {
    feature: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: 10
    },

    featureIcon: {
      width: 50,
      height: 50,
      resizeMode: 'contain',
      marginRight: 10
    },

    featureContent: {
      flex: 1
    },

    featureTitle: {
      ...sectionTitle(isDarkScheme),
      paddingBottom: 2.5
    },

    featureDescription: {
      ...sectionFooter(isDarkScheme)
    }
  }
}

const __react__vue__render = function render(vm) {
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        key: vm['title'],
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].feature, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['Image'], {
        source: vm['image'],
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].featureIcon, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].featureContent, undefined, undefined))
    }, __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].featureTitle, undefined, undefined))
    }, __react__vue__toString(vm['title'])), __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].featureDescription, undefined, undefined))
    }, __react__vue__toString(vm['description']))));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
