// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render detail list item renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,renderSlot as __react__vue__renderSlot,_toString as __react__vue__toString } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'


const __react__vue__options =  {
  name: 'DetailListItem',

  props: {
    icon: {
      type: String,
      default: null
    },
    title: {
      type: String,
      default: ''
    },
    value: {
      type: String,
      default: ''
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme)
    }
  }
}

const stylesStore = (isDarkScheme) => {
  return {
    detailListItemContainer: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingVertical: 5
    },

    detailListItemLeftContainer: {
      flexDirection: 'row',
      alignItems: 'center'
    },

    icon: {
      width: 14,
      height: 14,
      marginRight: 5,
      color: isDarkScheme ? 'white' : 'black'
    },

    title: {
      fontSize: 11,
      color: isDarkScheme ? 'white' : 'black'
    },

    value: {
      fontSize: 13,
      fontWeight: '600',
      color: isDarkScheme ? '#8374b2' : '#4d3f70'
    }
  }
}

const __react__vue__render = function render(vm) {
    const __react__vue__slotSet = __react__vue__renderSlot.call(this, ["icon", "title", "value"], this.props.children);
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].detailListItemContainer, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].detailListItemLeftContainer, undefined, undefined))
    }, __react__vue__slotSet("icon", {}) || [vm['icon'] ? __react__vue__createElement(vm.$options.components['Icon'], {
        name: vm['icon'],
        size: 14,
        key: 0,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].icon, undefined, undefined))
    }) : null], __react__vue__slotSet("title", {}) || [__react__vue__createElement(vm.$options.components['Text'], {
        key: 0,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].title, undefined, undefined))
    }, __react__vue__toString(vm['title']))]), __react__vue__slotSet("value", {}) || [__react__vue__createElement(vm.$options.components['Text'], {
        key: 0,
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].value, undefined, undefined))
    }, __react__vue__toString(vm['value']))]);
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
