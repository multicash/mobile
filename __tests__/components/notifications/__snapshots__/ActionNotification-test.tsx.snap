// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render action notification renders correctly 1`] = `
<import __react__vue__Vue, { observer as __react__vue__observer } from 'vue-native-core'
import __react__vue__ReactNative from 'react-native'
import __react__vue__PropType from 'prop-types'
import { buildNativeComponent as __react__vue__buildNativeComponent } from 'vue-native-helper'
import { bindNativeClass as __react__vue__bindClass,bindNativeStyle as __react__vue__bindStyle,mergeNativeStyleAndNativeClass as __react__vue__mergeNativeStyleAndNativeClass,mergeProps as __react__vue__mergeProps,_toString as __react__vue__toString,renderSlot as __react__vue__renderSlot } from 'vue-native-helper'
import {
      createElement as __react__vue__createElement,
      Component as __react__vue__Component
    } from 'react'


const __react__vue__options =  {
  name: 'ActionNotification',

  props: {
    title: {
      type: String,
      default: ''
    },

    label: {
      type: String,
      default: ''
    },

    type: {
      type: String,
      default: 'default'
    }
  },

  computed: {
    styles () {
      return stylesStore(this.isDarkScheme, this.type)
    }
  }
}

const stylesStore = (isDarkScheme, type) => {
  const typeColors = {

    default: {
      actionNotification: {
        backgroundColor: isDarkScheme ? '#191919' : 'white'
      },
      actionNotificationTitle: {
        color: isDarkScheme ? '#d4d4d4' : '#3b3b3b'
      },
      actionNotificationText: {
        color: isDarkScheme ? '#d4d4d4' : '#3b3b3b'
      }
    },

    primary: {
      actionNotification: {
        backgroundColor: '#00b0ee'
      },
      actionNotificationTitle: {
        color: 'white'
      },
      actionNotificationText: {
        color: 'white'
      }
    },

    success: {
      actionNotification: {
        backgroundColor: '#00ae5a'
      },
      actionNotificationTitle: {
        color: 'white'
      },
      actionNotificationText: {
        color: 'white'
      }
    },

    warning: {
      actionNotification: {
        backgroundColor: '#ffdd57'
      },
      actionNotificationTitle: {
        color: '#3b3b3b'
      },
      actionNotificationText: {
        color: '#3b3b3b'
      }
    },

    danger: {
      actionNotification: {
        backgroundColor: '#f14668'
      },
      actionNotificationTitle: {
        color: 'white'
      },
      actionNotificationText: {
        color: 'white'
      }
    }

  }

  return {
    actionNotification: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: typeColors[type].actionNotification.backgroundColor,
      borderRadius: 10,
      padding: 15,
      marginBottom: 10
    },

    actionNotificationTitle: {
      color: typeColors[type].actionNotificationTitle.color,
      fontWeight: 'bold'
    },

    actionNotificationText: {
      color: typeColors[type].actionNotificationText.color
    }
  }
}

const __react__vue__render = function render(vm) {
    const __react__vue__slotSet = __react__vue__renderSlot.call(this, [], this.props.children);
    return __react__vue__createElement(vm.$options.components['View'], __react__vue__mergeProps.call(this, this.props.__react__vue__nativeEvents, {
        ref: ref => {
            this.setRootRef(ref);
            this.props['__react__vue__setRef'] && this.props['__react__vue__setRef'](ref);
        },
        style: __react__vue__mergeNativeStyleAndNativeClass(__react__vue__bindClass.call(this, {
            parentClass: this.props.style
        }), __react__vue__bindStyle(vm['styles'].actionNotification, undefined, undefined))
    }), __react__vue__createElement(vm.$options.components['View'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle({
            flex: 1
        }, undefined, undefined))
    }, __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].actionNotificationTitle, undefined, undefined))
    }, __react__vue__toString(vm['title'])), __react__vue__createElement(vm.$options.components['Text'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, __react__vue__bindStyle(vm['styles'].actionNotificationText, undefined, undefined))
    }, __react__vue__toString(vm['label']))), __react__vue__createElement(vm.$options.components['Spacer'], {
        style: __react__vue__mergeNativeStyleAndNativeClass(undefined, undefined)
    }), __react__vue__slotSet(undefined, {}));
};

const __react__vue__css = {}

const __react__vue__ComponentBuilded = __react__vue__buildNativeComponent(__react__vue__render, __react__vue__options, {Component: __react__vue__Component, PropTypes: __react__vue__PropType, Vue: __react__vue__Vue, ReactNative: __react__vue__ReactNative, css: __react__vue__css})

export default __react__vue__observer(__react__vue__ComponentBuilded) />
`;
